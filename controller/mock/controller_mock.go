// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/isaacRevan24/gamification-toolkit-logic/model"
)

// MockUserControllerInterface is a mock of UserControllerInterface interface.
type MockUserControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerInterfaceMockRecorder
}

// MockUserControllerInterfaceMockRecorder is the mock recorder for MockUserControllerInterface.
type MockUserControllerInterfaceMockRecorder struct {
	mock *MockUserControllerInterface
}

// NewMockUserControllerInterface creates a new mock instance.
func NewMockUserControllerInterface(ctrl *gomock.Controller) *MockUserControllerInterface {
	mock := &MockUserControllerInterface{ctrl: ctrl}
	mock.recorder = &MockUserControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserControllerInterface) EXPECT() *MockUserControllerInterfaceMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockUserControllerInterface) SignUp(request model.SignUpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserControllerInterfaceMockRecorder) SignUp(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserControllerInterface)(nil).SignUp), request)
}

// MockHabitControllerInterface is a mock of HabitControllerInterface interface.
type MockHabitControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHabitControllerInterfaceMockRecorder
}

// MockHabitControllerInterfaceMockRecorder is the mock recorder for MockHabitControllerInterface.
type MockHabitControllerInterfaceMockRecorder struct {
	mock *MockHabitControllerInterface
}

// NewMockHabitControllerInterface creates a new mock instance.
func NewMockHabitControllerInterface(ctrl *gomock.Controller) *MockHabitControllerInterface {
	mock := &MockHabitControllerInterface{ctrl: ctrl}
	mock.recorder = &MockHabitControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitControllerInterface) EXPECT() *MockHabitControllerInterfaceMockRecorder {
	return m.recorder
}

// AddNewHabit mocks base method.
func (m *MockHabitControllerInterface) AddNewHabit(reques model.AddNewHabitRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewHabit", reques)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNewHabit indicates an expected call of AddNewHabit.
func (mr *MockHabitControllerInterfaceMockRecorder) AddNewHabit(reques interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewHabit", reflect.TypeOf((*MockHabitControllerInterface)(nil).AddNewHabit), reques)
}
