// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockUserHandlerInterface is a mock of UserHandlerInterface interface.
type MockUserHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerInterfaceMockRecorder
}

// MockUserHandlerInterfaceMockRecorder is the mock recorder for MockUserHandlerInterface.
type MockUserHandlerInterfaceMockRecorder struct {
	mock *MockUserHandlerInterface
}

// NewMockUserHandlerInterface creates a new mock instance.
func NewMockUserHandlerInterface(ctrl *gomock.Controller) *MockUserHandlerInterface {
	mock := &MockUserHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockUserHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandlerInterface) EXPECT() *MockUserHandlerInterfaceMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockUserHandlerInterface) SignUp(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignUp", context)
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserHandlerInterfaceMockRecorder) SignUp(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserHandlerInterface)(nil).SignUp), context)
}

// MockHabitHandlerInterface is a mock of HabitHandlerInterface interface.
type MockHabitHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHabitHandlerInterfaceMockRecorder
}

// MockHabitHandlerInterfaceMockRecorder is the mock recorder for MockHabitHandlerInterface.
type MockHabitHandlerInterfaceMockRecorder struct {
	mock *MockHabitHandlerInterface
}

// NewMockHabitHandlerInterface creates a new mock instance.
func NewMockHabitHandlerInterface(ctrl *gomock.Controller) *MockHabitHandlerInterface {
	mock := &MockHabitHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockHabitHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHabitHandlerInterface) EXPECT() *MockHabitHandlerInterfaceMockRecorder {
	return m.recorder
}

// AddHabit mocks base method.
func (m *MockHabitHandlerInterface) AddHabit(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHabit", context)
}

// AddHabit indicates an expected call of AddHabit.
func (mr *MockHabitHandlerInterfaceMockRecorder) AddHabit(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHabit", reflect.TypeOf((*MockHabitHandlerInterface)(nil).AddHabit), context)
}

// DeleteHabit mocks base method.
func (m *MockHabitHandlerInterface) DeleteHabit(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteHabit", context)
}

// DeleteHabit indicates an expected call of DeleteHabit.
func (mr *MockHabitHandlerInterfaceMockRecorder) DeleteHabit(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHabit", reflect.TypeOf((*MockHabitHandlerInterface)(nil).DeleteHabit), context)
}
